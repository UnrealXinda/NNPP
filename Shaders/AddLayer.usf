#include "/Engine/Private/Common.ush"

StructuredBuffer<float> InputBuffer1;
StructuredBuffer<float> InputBuffer2;
RWStructuredBuffer<float> OutputBuffer;

[numthreads(32, 32, 1)]
void AddLayer(uint3 ThreadId : SV_DispatchThreadID)
{
	const uint3 InputDim           = AddLayerUniform.InputDim;
	const uint3 OutputDim          = AddLayerUniform.OutputDim;
	const uint3 InputDimIndexMult  = AddLayerUniform.InputDimIndexMult;
	const uint3 OutputDimIndexMult = AddLayerUniform.OutputDimIndexMult;
	
	uint InputIdx = dot(ThreadId, InputDimIndexMult);
	uint OutputIdx = dot(ThreadId, OutputDimIndexMult);
	
	if (InputIdx < InputDim.x * InputDim.y * InputDim.z 
		&& OutputIdx < OutputDim.x * OutputDim.y * OutputDim.z)
	{	
		OutputBuffer[OutputIdx] = InputBuffer1[InputIdx] + InputBuffer2[InputIdx];
	}
}
#include "/Engine/Private/Common.ush"

#define n_Wk WeightDim.y
#define n_Hk WeightDim.x
#define n_Ck WeightDim.w
#define n_Wi InputDim.y
#define n_Hi InputDim.x
#define n_Ci InputDim.z
#define n_Wo OutputDim.y
#define n_Ho OutputDim.x
#define n_Co OutputDim.z

#define SHADER_IMPLEMENTATION(FilterSize)																		              \
																															  \
uint2 InputId = ThreadId.zy * Stride;																						  \
																															  \
float Bias = WeightBuffer[n_Wk * n_Hk * n_Ci * n_Ck + ThreadId.x];															  \
float Conv = 0;																												  \
																															  \
uint3 Offset = uint3((n_Wk - 1) / 2, (n_Hk - 1) / 2, 0);																	  \
																															  \
for (uint P = 0; P < n_Wk; P++)																								  \
{																															  \
	for (uint Q = 0; Q < n_Hk; Q++)																							  \
	{																														  \
																															  \
		int3 InputIdx = int3(InputId.xy, ThreadId.x) - int3(Offset) + int3(P, Q, 0);										  \
																															  \
		if (ThreadId.x < n_Ci)																								  \
		{																													  \
			InputIdx.x = abs(InputIdx.x);																					  \
			InputIdx.y = abs(InputIdx.y);																					  \
			InputIdx.x = InputIdx.x > (int) InputDim.x ? 2 * (int) InputDim.x - InputIdx.x : InputIdx.x;					  \
			InputIdx.y = InputIdx.y > (int) InputDim.y ? 2 * (int) InputDim.y - InputIdx.y : InputIdx.y;					  \
																															  \
			Cache[GroupId.z * FilterSize + ThreadId.x] = InputBuffer[dot(InputIdx.xyz, InputDimIndexMult)];					  \
		}																													  \
																															  \
		GroupMemoryBarrierWithGroupSync();																					  \
																															  \
		for (uint W = 0; W < n_Ci; W++)																						  \
		{																													  \
			Conv += Cache[GroupId.z * FilterSize + W] * WeightBuffer[dot(uint4(P, Q, W, ThreadId.x), WeightDimIndexMult)];	  \
		}																													  \
																															  \
		GroupMemoryBarrierWithGroupSync();																					  \
	}																														  \
}																															  \
																															  \
if (ThreadId.x < n_Co)																										  \
{																															  \
	OutputBuffer[dot(ThreadId.zyx, OutputDimIndexMult)] = Conv + Bias;														  \
}
#include "/Engine/Private/Common.ush"

Texture2D<float4> InputTexture;
RWStructuredBuffer<float> OutputBuffer;

[numthreads(32, 32, 1)]
void InputLayer(uint3 ThreadId : SV_DispatchThreadID)
{
	const uint3 InputDim          = InputLayerUniform.InputDim;
	const uint3 InputDimIndexMult = InputLayerUniform.InputDimIndexMult;
	
	if (ThreadId.x < InputDim.x && ThreadId.y < InputDim.y)
	{
		uint2 RemappedId = uint2(ThreadId.y, InputDim.x - 1 - ThreadId.x);
		float4 Color = InputTexture[RemappedId.xy] * 2.0f - 1.0f;
		
		OutputBuffer[dot(uint3(ThreadId.xy, 0), InputDimIndexMult)] = Color.x;
		OutputBuffer[dot(uint3(ThreadId.xy, 1), InputDimIndexMult)] = Color.y;
		OutputBuffer[dot(uint3(ThreadId.xy, 2), InputDimIndexMult)] = Color.z;
	}
}